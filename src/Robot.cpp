// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Preferences.h"
#include "Commands/AutoCDriveOnly.h"
#include "Commands/AutoCArmDrive.h"
#include "Commands/AutoCDriveShoot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Chassis> Robot::chassis;
std::shared_ptr<Shooter> Robot::shooter;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Arm> Robot::arm;
std::shared_ptr<Climber> Robot::climber;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

Preferences* Robot::robotPref = 0;
int Robot::armGoal = 0;
float Robot::shootSpeed = 0;
int Robot::m_armGoal = 0;

void Robot::RobotInit() {
	RobotMap::init();
    robotPref = Preferences::GetInstance();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    chassis.reset(new Chassis());
    shooter.reset(new Shooter());
    intake.reset(new Intake());
    arm.reset(new Arm());
    climber.reset(new Climber());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	oi.reset(new OI());



	// initializing the position of the pneumatics here, setting to high gear
	Robot::chassis->leftShifter->Set(true);
	Robot::chassis->rightShifter->Set(true);

	// initializing flashlight
	Robot::shooter->shooterFlashlight->Set(Relay::Value::kOff);

	// starting the camera
	CameraServer::GetInstance()->SetQuality(50);
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");

	// auto choosing
	autonomousModeChooser = new SendableChooser();
	autonomousModeChooser->AddDefault("AutoDriveOnly", new AutoCDriveOnly());
	autonomousModeChooser->AddObject("AutoArm&Drive", new AutoCArmDrive());
	autonomousModeChooser->AddObject("AutoDriveShoot", new AutoCDriveShoot());
	SmartDashboard::PutData("Autonomous modes", autonomousModeChooser);

	//initializing Gyro
	Robot::chassis->gyro->InitGyro();
	Robot::chassis->gyro->Reset();
	Robot::chassis->gyro->SetSensitivity(0.007);
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit()
{
	// set shifters to low gear at end of match
	Robot::chassis->leftShifter->Set(false);
	Robot::chassis->rightShifter->Set(false);
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	// instantiate the command used for the autonomous period
	autonomousCommand = (Command*) autonomousModeChooser->GetSelected();

	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();

	// necessary to avoid overwriting pre-existing preferences, if they exist
	if (!Robot::robotPref->ContainsKey("armGoal"))
		Robot::robotPref->PutInt("armGoal", 48);
	m_armGoal = armGoal;
	if (!Robot::robotPref->ContainsKey("shootSpeed"))
		Robot::robotPref->PutFloat("shootSpeed", 0.60701);


	Robot::chassis->gyro->Reset();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

